#include <iostream>
#include <cstdlib>
#include <ctime>
#include <chrono>
#include <fstream>
#include <thread> 

using namespace std;

int** crearMatriz(int filas, int columnas) {
    if (filas <= 0 || columnas <= 0) {
        cerr << "Error: Las dimensiones deben ser mayores que cero." << endl;
        return nullptr; 
    }

    int** matriz = new int*[filas];
    for (int i = 0; i < filas; ++i) {
        matriz[i] = new int[columnas];
    }
    return matriz;
}


void rellenarMatriz(int** arr, int filas, int columnas) {
    srand(time(0)); 

    for (int i = 0; i < filas; i++) {
        for (int j = 0; j < columnas; j++) {
            arr[i][j] = rand() % 100; 
        }
    }
}

int sumarmatriz(int** arr, int filas, int columnas) {
    int sum = 0;

    for (int i = 0; i < filas; i++) {
        for (int j = 0; j < columnas; j++) {
            sum = sum + arr[i][j];
        }
    }
    return sum;
}

void mostrarMatriz(int** matriz, int filas, int columnas) {
    cout << "La matriz es:" << endl;
    for (int i = 0; i < filas; ++i) {
        for (int j = 0; j < columnas; ++j) {
            cout << matriz[i][j] << " ";
        }
        cout << endl;
    }
}

void probarMatrices(const char* nombreArchivo) {
    ofstream archivo(nombreArchivo); 
    if (!archivo.is_open()) {
        cerr << "Error al abrir el archivo." << endl;
        return;
    }

    for (int tam = 1; tam <= 3000; tam += 1) { 
        int** matriz = crearMatriz(tam, tam);
        if (matriz == nullptr) {
            cerr << "Error al crear la matriz de tamaÃ±o " << tam << endl;
            continue;
        }

        rellenarMatriz(matriz, tam, tam);

        auto inicio = chrono::high_resolution_clock::now();
        int resultado = sumarmatriz(matriz, tam, tam);
        auto fin = chrono::high_resolution_clock::now();
        auto tiempo = chrono::duration_cast<chrono::nanoseconds>(fin - inicio)/10; 

      
        archivo << tam << ", " << tiempo.count() << endl;
        cout << tam<<", " << tiempo.count()<< endl;

        for (int i = 0; i < tam; ++i) {
            delete[] matriz[i];
        }
        delete[] matriz;
    }

    archivo.close(); 
    cout << "Resultados guardados en " << nombreArchivo << endl;
}

int main() {
    probarMatrices("tiempos_suma.txt"); 
    return 0;
}
